% Encoding: UTF-8
@Book{thinkingforth,
author = "Leo Brodie",
title = "Thinking Forth",
publisher = "Punchy Publishing",
year = 2004,
}

@article{OPDYKE1990,
author="OPDYKE, W. F.",
title="Refactoring : An aid in designing application frameworks and evolving object-oriented systems",
journal="Proc. SOOPPA '90 : Symposium on Object-Oriented Programming Emphasizing Practical Applications",
ISSN="",
publisher="",
year="1990",
month="",
volume="",
number="",
pages="",
URL="https://ci.nii.ac.jp/naid/10011225109/en/",
DOI="",
}

@ARTICLE{Mens2004,  author={Mens, T. and Tourwe, T.},  journal={IEEE Transactions on Software Engineering},   title={A survey of software refactoring},   year={2004},  volume={30},  number={2},  pages={126-139},  doi={10.1109/TSE.2004.1265817}}

@inproceedings{Moser2006,
  title={Does refactoring improve reusability?},
  author={Moser, Raimund and Sillitti, Alberto and Abrahamsson, Pekka and Succi, Giancarlo},
  booktitle={International conference on software reuse},
  pages={287--297},
  year={2006},
  organization={Springer}
}

@article{bavota2015experimental,
  title={An experimental investigation on the innate relationship between quality and refactoring},
  author={Bavota, Gabriele and De Lucia, Andrea and Di Penta, Massimiliano and Oliveto, Rocco and Palomba, Fabio},
  journal={Journal of Systems and Software},
  volume={107},
  pages={1--14},
  year={2015},
  publisher={Elsevier}
}

@inproceedings{alomar2019impact,
  title={On the impact of refactoring on the relationship between quality attributes and design metrics},
  author={AlOmar, Eman Abdullah and Mkaouer, Mohamed Wiem and Ouni, Ali and Kessentini, Marouane},
  booktitle={2019 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)},
  pages={1--11},
  year={2019},
  organization={IEEE}
}

@inproceedings{pantiuchina2018improving,
  title={Improving code: The (mis) perception of quality metrics},
  author={Pantiuchina, Jevgenija and Lanza, Michele and Bavota, Gabriele},
  booktitle={2018 IEEE International Conference on Software Maintenance and Evolution (ICSME)},
  pages={80--91},
  year={2018},
  organization={IEEE}
}

@inproceedings{cedrim2016does,
  title={Does refactoring improve software structural quality? a longitudinal study of 25 projects},
  author={Cedrim, Diego and Sousa, Leonardo and Garcia, Alessandro and Gheyi, Rohit},
  booktitle={Proceedings of the 30th Brazilian Symposium on Software Engineering},
  pages={73--82},
  year={2016}
}

@article{wilking2007empirical,
  title={An Empirical Evaluation of Refactoring.},
  author={Wilking, Dirk and Kahn, Umar Farooq and Kowalewski, Stefan},
  journal={e Informatica Softw. Eng. J.},
  volume={1},
  number={1},
  pages={27--42},
  year={2007}
}


@inproceedings{Negara2013,
author = {Negara, Stas and Chen, Nicholas and Vakilian, Mohsen and Johnson, Ralph and Dig, Danny},
year = {2013},
month = {07},
pages = {552-576},
title = {A Comparative Study of Manual and Automated Refactorings},
volume = {7920},
doi = {10.1007/978-3-642-39038-8_23}
}

@article{Ge2012,
author = {Ge, Xi and DuBose, Quinton and Murphy-Hill, Emerson},
year = {2012},
month = {06},
pages = {211-221},
title = {Reconciling manual and automatic refactoring},
journal = {Proceedings - International Conference on Software Engineering},
doi = {10.1109/ICSE.2012.6227192}
}

@Conference{Foster2012,
  author    = {Stephen R. Foster and William G. Griswold and Sorin Lerner},
  booktitle = {Proceedings of the 34th International Conference on Software Engineering},
  title     = {WitchDoctor: IDE support for real-time auto-completion of refactorings},
  year      = {2012},
  address   = {Zurich, Switzerland},
  month     = {6},
  pages     = {222–232},
  publisher = {IEEE Press},
  series    = {ICSE '12},
  abstract  = {Integrated Development Environments (IDEs) have come to perform a wide variety of
tasks on behalf of the programmer, refactoring being a classic example. These operations
have undeniable benefits, yet their large (and growing) number poses a cognitive scalability
problem. Our main contribution is WitchDoctor -- a system that can detect, on the
fly, when a programmer is hand-coding a refactoring. The system can then complete
the refactoring in the background and propose it to the user long before the user
can complete it. This implies a number of technical challenges. The algorithm must
be 1) highly efficient, 2) handle unparseable programs, 3) tolerate the variety of
ways programmers may perform a given refactoring, 4) use the IDE's proven and familiar
refactoring engine to perform the refactoring, even though the the refactoring has
already begun, and 5) support the wide range of refactorings present in modern IDEs.
Our techniques for overcoming these challenges are the technical contributions of
this paper. We evaluate WitchDoctor's design and implementation by simulating over
5,000 refactoring operations across three open-source projects. The simulated user
is faster and more efficient than an average human user, yet WitchDoctor can detect
more than 90\% of refactoring operations as they are being performed -- and can complete
over a third of refactorings before the simulated user does. All the while, WitchDoctor
remains robust in the face of non-parseable programs and unpredictable refactoring
scenarios. We also show that WitchDoctor is efficient enough to perform computation
on a keystroke-by-keystroke basis, adding an average overhead of only 15 milliseconds
per keystroke.},
  day       = {2},
  isbn      = {9781467310673},
  pagetotal = {11},
}

@Conference{Ge2014,
  author    = {Xi Ge and Emerson Murphy-Hill},
  booktitle = {Proceedings of the 36th International Conference on Software Engineering},
  title     = {Manual refactoring changes with automated refactoring validation},
  year      = {2014},
  address   = {New York, NY, USA},
  month     = {5},
  pages     = {1095–1105},
  publisher = {Association for Computing Machinery},
  series    = {ICSE 2014},
  abstract  = {Refactoring, the practice of applying behavior-preserving changes to existing code,
can enhance the quality of software systems. Refactoring tools can automatically perform
and check the correctness of refactorings. However, even when developers have these
tools, they still perform about 90\% of refactorings manually, which is error-prone.
To address this problem, we propose a technique called GhostFactor separating transformation
and correctness checking: we allow the developer to transform code manually, but check
the correctness of her transformation automatically. We implemented our technique
as a Visual Studio plugin, then evaluated it with a human study of eight software
developers; GhostFactor improved the correctness of manual refactorings by 67%.},
  day       = {31},
  doi       = {10.1145/2568225.2568280},
  isbn      = {9781450327565},
  keywords  = {IDE, Refactoring, Restructuring, Tool},
  location  = {Hyderabad, India},
  pagetotal = {11},
  url       = {https://doi.org/10.1145/2568225.2568280},
}

@INPROCEEDINGS{Ge2017,  author={Ge, Xi and Sarkar, Saurabh and Witschey, Jim and Murphy-Hill, Emerson},  booktitle={2017 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC)},   title={Refactoring-aware code review},   year={2017},  volume={},  number={},  pages={71-79},  doi={10.1109/VLHCC.2017.8103453}}

@Conference{Demeyer2000,
  author    = {Serge Demeyer and Stéphane Ducasse and Oscar Nierstrasz},
  booktitle = {Proceedings of the 15th ACM SIGPLAN conference on Object-oriented programming, systems, languages, and applications},
  title     = {Finding refactorings via change metrics},
  year      = {2000},
  address   = {New York, NY, USA},
  month     = {10},
  pages     = {166–177},
  publisher = {Association for Computing Machinery},
  series    = {OOPSLA '00},
  abstract  = {Reverse engineering is the process of uncovering the design and the design rationale
from a functioning software system. Reverse engineering is an integral part of any
successful software system, because changing requirements lead to implementations
that drift from their original design. In contrast to traditional reverse engineering
techniques ---which analyse a single snapshot of a system--- we focus the reverse
engineering effort by determining where the implementation has changed. Since changes
of object-oriented software are often phrased in terms of refactorings, we propose
a set of heuristics for detecting refactorings by applying lightweight, object-oriented
metrics to successive versions of a software system. We validate our approach with
three separate case studies of mature object-oriented software systems for which multiple
versions are available. The case studies suggest that the heuristics support the reverse
engineering process by focusing attention on the relevant parts of a software system.},
  day       = {1},
  doi       = {10.1145/353171.353183},
  isbn      = {158113200X},
  keywords  = {metrics, object-oriented frameworks, refactoring, reverse engineering, software evolution},
  location  = {Minneapolis, Minnesota, USA},
  pagetotal = {12},
  url       = {https://doi.org/10.1145/353171.353183},
}

@INPROCEEDINGS{Antoniol2004,  author={Antoniol, G. and Di Penta, M. and Merlo, E.},  booktitle={Proceedings. 7th International Workshop on Principles of Software Evolution, 2004.},   title={An automatic approach to identify class evolution discontinuities},   year={2004},  volume={},  number={},  pages={31-40},  doi={10.1109/IWPSE.2004.1334766}}

@INPROCEEDINGS{Weissgerber2006,  author={Weissgerber, Peter and Diehl, Stephan},  booktitle={21st IEEE/ACM International Conference on Automated Software Engineering (ASE'06)},   title={Identifying Refactorings from Source-Code Changes},   year={2006},  volume={},  number={},  pages={231-240},  doi={10.1109/ASE.2006.41}}

@article{Kamiya2002,
author = {Kamiya, Toshihiro and Kusumoto, Shinji and Inoue, Katsuro},
title = {CCFinder: A Multilinguistic Token-Based Code Clone Detection System for Large Scale Source Code},
year = {2002},
issue_date = {July 2002},
publisher = {IEEE Press},
volume = {28},
number = {7},
issn = {0098-5589},
url = {https://doi.org/10.1109/TSE.2002.1019480},
doi = {10.1109/TSE.2002.1019480},
abstract = {A code clone is a code portion in source files that is identical or similar to another.
Since code clones are believed to reduce the maintainability of software, several
code clone detection techniques and tools have been proposed. This paper proposes
a new clone detection technique, which consists of the transformation of input source
text and a token-by-token comparison. For its implementation with several useful optimization
techniques, we have developed a tool, named CCFinder, which extracts code clones in
C, C++, Java, COBOL, and other source files. As well, metrics for the code clones
have been developed: In order to evaluate the usefulness of CCFinder and metrics,
we conducted several case studies where we applied the new tool to the source code
of JDK, FreeBSD, NetBSD, Linux, and many other systems. As a result, CCFinder has
effectively found clones and the metrics have been able to effectively identify the
characteristics of the systems. In addition, we have compared the proposed technique
with other clone detection techniques.},
journal = {IEEE Trans. Softw. Eng.},
month = jul,
pages = {654–670},
numpages = {17},
keywords = {code clone, duplicated code, CASE tool, maintenance, metrics}
}
@Comment{jabref-meta: databaseType:bibtex;}

@inproceedings{Krasniqi2020,
author = {Krasniqi, Rrezarta and Cleland-Huang, Jane},
year = {2020},
month = {02},
pages = {512-516},
title = {Enhancing Source Code Refactoring Detection with Explanations from Commit Messages},
doi = {10.1109/SANER48275.2020.9054816}
}

@ARTICLE{MurphyHill2012,  author={Murphy-Hill, Emerson and Parnin, Chris and Black, Andrew P.},  journal={IEEE Transactions on Software Engineering},   title={How We Refactor, and How We Know It},   year={2012},  volume={38},  number={1},  pages={5-18},  doi={10.1109/TSE.2011.41}}

@inproceedings{Dig2006,
author = {Dig, Danny and Comertoglu, Can and Marinov, Darko and Johnson, Ralph},
year = {2006},
month = {07},
pages = {},
title = {Automated Detection of Refactorings in Evolving Components},
isbn = {978-3-540-35726-1},
doi = {10.1007/11785477_24}
}


@inproceedings{Biegel2011,
author = {Biegel, Benjamin and Soetens, Quinten David and Hornig, Willi and Diehl, Stephan and Demeyer, Serge},
title = {Comparison of Similarity Metrics for Refactoring Detection},
year = {2011},
isbn = {9781450305747},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1985441.1985452},
doi = {10.1145/1985441.1985452},
abstract = {Identifying refactorings in software archives has been an active research topic in
the last decade, mainly because it is a prerequisite for various software evolution
analyses (e.g., error detection, capturing intent of change, capturing and replaying
changes, and relating refactorings and software metrics). Many of these techniques
rely on similarity measures to identify structurally equivalent code, however, up
until now the effect of this similarity measure on the performance of the refactoring
identification algorithm is largely unexplored. In this paper we replicate a well-known
experiment from Wei\ss{}gerber and Diehl, plugging in three different similarity measures
(text-based, AST-based, token-based). We look at the overlap of the results obtained
by the different metrics, and we compare the results using recall and the computation
time. We conclude that the different result sets have a large overlap and that the
three metrics perform with a comparable quality.},
booktitle = {Proceedings of the 8th Working Conference on Mining Software Repositories},
pages = {53–62},
numpages = {10},
keywords = {replication experiment, similarity metrics, software evolution, code clones, mining software repositories, refactoring},
location = {Waikiki, Honolulu, HI, USA},
series = {MSR '11}
}

@INPROCEEDINGS{Biegel2010,  author={Biegel, Benjamin and Diehl, Stephan},  booktitle={2010 17th Working Conference on Reverse Engineering},   title={Highly Configurable and Extensible Code Clone Detection},   year={2010},  volume={},  number={},  pages={237-241},  doi={10.1109/WCRE.2010.34}}


@INPROCEEDINGS{Broder1997,  author={Broder, A.Z.},  booktitle={Proceedings. Compression and Complexity of SEQUENCES 1997 (Cat. No.97TB100171)},   title={On the resemblance and containment of documents},   year={1997},  volume={},  number={},  pages={21-29},  doi={10.1109/SEQUEN.1997.666900}}

@article{Xing2007,
author = {Xing, Zhenchang and Stroulia, Eleni},
year = {2007},
month = {07},
pages = {215-259},
title = {Differencing logical UML models},
volume = {14},
journal = {Autom. Softw. Eng.},
doi = {10.1007/s10515-007-0007-3}
}

@inproceedings{Xing2005,
author = {Xing, Zhenchang and Stroulia, Eleni},
title = {UMLDiff: An Algorithm for Object-Oriented Design Differencing},
year = {2005},
isbn = {1581139934},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1101908.1101919},
doi = {10.1145/1101908.1101919},
abstract = {This paper presents UMLDiff, an algorithm for automatically detecting structural changes
between the designs of subsequent versions of object-oriented software. It takes as
input two class models of a Java software system, reverse engineered from two corresponding
code versions. It produces as output a change tree, i.e., a tree of structural changes,
that reports the differences between the two design versions in terms of (a) additions,
removals, moves, renamings of packages, classes, interfaces, fields and methods, (b)
changes to their attributes, and (c) changes of the dependencies among these entities.
UMLDiff produces an accurate report of the design evolution of the software system,
and enables subsequent design-evolution analyses from multiple perspectives in support
of various evolution activities. UMLDiff and the analyses it enables can assist software
engineers in their tasks of understanding the rationale of design evolution of the
software system and planning future development and maintenance activities. We evaluate
UMLDiff's correctness and robustness through a real-world case stud.},
booktitle = {Proceedings of the 20th IEEE/ACM International Conference on Automated Software Engineering},
pages = {54–65},
numpages = {12},
keywords = {design differencing, structural evolution, design mentoring, design understanding},
location = {Long Beach, CA, USA},
series = {ASE '05}
}

@INPROCEEDINGS{Xing2006,  author={Xing, Zhenchang and Stroulia, Eleni},  booktitle={2006 13th Working Conference on Reverse Engineering},   title={Refactoring Detection based on UMLDiff Change-Facts Queries},   year={2006},  volume={},  number={},  pages={263-274},  doi={10.1109/WCRE.2006.48}}

@inproceedings{Xing2008,
author = {Xing, Zhenchang and Stroulia, Eleni},
title = {The JDEvAn Tool Suite in Support of Object-Oriented Evolutionary Development},
year = {2008},
isbn = {9781605580791},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1370175.1370203},
doi = {10.1145/1370175.1370203},
booktitle = {Companion of the 30th International Conference on Software Engineering},
pages = {951–952},
numpages = {2},
keywords = {asynchronous api evolution, refactoring detection, model differencing, evolutionary software development},
location = {Leipzig, Germany},
series = {ICSE Companion '08}
}

@inproceedings{Kim2010,
author = {Kim, Miryung and Gee, Matthew and Loh, Alex and Rachatasumrit, Napol},
title = {Ref-Finder: A Refactoring Reconstruction Tool Based on Logic Query Templates},
year = {2010},
isbn = {9781605587912},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1882291.1882353},
doi = {10.1145/1882291.1882353},
abstract = {Knowing which parts of a system underwent which types of refactoring between two program
versions can help programmers better understand code changes. Though there are a number
of techniques that automatically find refactorings from two input program versions,
these techniques are inadequate in terms of coverage by handling only a subset of
refactoring types---mostly simple rename and move refactorings at the level of classes,
methods, and fields. This paper presents a Ref-Finder Eclipse plug-in that automatically
identifies both atomic and composite refactorings using a template-based refactoring
reconstruction approach---it expresses each refactoring type in terms of template
logic queries and uses a logic programming engine to infer concrete refactoring instances.
Ref-Finder currently supports sixty three types in the Fowler's catalog, showing the
most comprehensive coverage among existing techniques.},
booktitle = {Proceedings of the Eighteenth ACM SIGSOFT International Symposium on Foundations of Software Engineering},
pages = {371–372},
numpages = {2},
keywords = {software evolution, logic-based program representation, refactoring, program differencing},
location = {Santa Fe, New Mexico, USA},
series = {FSE '10}
}

@INPROCEEDINGS{Prete2010,  author={Prete, Kyle and Rachatasumrit, Napol and Sudan, Nikita and Kim, Miryung},  booktitle={2010 IEEE International Conference on Software Maintenance},   title={Template-based reconstruction of complex refactorings},   year={2010},  volume={},  number={},  pages={1-10},  doi={10.1109/ICSM.2010.5609577}}

@book{Fowler1999,
  added-at = {2007-09-26T23:42:13.000+0200},
  address = {Boston, MA, USA},
  author = {Fowler, Martin},
  biburl = {https://www.bibsonomy.org/bibtex/27151885e8b8528651e048242f3527132/kimmens},
  description = {AOEvolutionchapter short paper},
  interhash = {955b704413985c65e6a0ba497d70b00e},
  intrahash = {7151885e8b8528651e048242f3527132},
  isbn = {0-201-48567-2},
  keywords = {evolution refactoring software},
  publisher = {Addison-Wesley},
  timestamp = {2007-09-26T23:42:13.000+0200},
  title = {Refactoring: Improving the Design of Existing Code},
  year = 1999
}


@INPROCEEDINGS{Silva2017,  author={Silva, Danilo and Valente, Marco Tulio},  booktitle={2017 IEEE/ACM 14th International Conference on Mining Software Repositories (MSR)},   title={RefDiff: Detecting Refactorings in Version Histories},   year={2017},  volume={},  number={},  pages={269-279},  doi={10.1109/MSR.2017.14}}

@inproceedings{Tan2019,
  title={A Survey of Refactoring Detection Tools.},
  author={Tan, Liang and Bockisch, Christoph},
  booktitle={Software Engineering (Workshops)},
  pages={100--105},
  year={2019}
}

@article{Soares2013,
author = {Soares, Gustavo and Gheyi, Rohit and Murphy-Hill, Emerson and Johnson, Brittany},
title = {Comparing Approaches to Analyze Refactoring Activity on Software Repositories},
year = {2013},
issue_date = {April, 2013},
publisher = {Elsevier Science Inc.},
address = {USA},
volume = {86},
number = {4},
issn = {0164-1212},
url = {https://doi.org/10.1016/j.jss.2012.10.040},
doi = {10.1016/j.jss.2012.10.040},
abstract = {Some approaches have been used to investigate evidence on how developers refactor
their code, whether refactorings activities may decrease the number of bugs, or improve
developers' productivity. However, there are some contradicting evidence in previous
studies. For instance, some investigations found evidence that if the number of refactoring
changes increases in the preceding time period the number of defects decreases, different
from other studies. They have used different approaches to evaluate refactoring activities.
Some of them identify committed behavior-preserving transformations in software repositories
by using manual analysis, commit messages, or dynamic analysis. Others focus on identifying
which refactorings are applied between two programs by using manual inspection or
static analysis. In this work, we compare three different approaches based on manual
analysis, commit message (Ratzinger's approach) and dynamic analysis (SafeRefactor's
approach) to detect whether a pair of versions determines a refactoring, in terms
of behavioral preservation. Additionally, we compare two approaches (manual analysis
and Ref-Finder) to identify which refactorings are performed in each pair of versions.
We perform both comparisons by evaluating their accuracy, precision, and recall in
a randomly selected sample of 40 pairs of versions of JHotDraw, and 20 pairs of versions
of Apache Common Collections. While the manual analysis presents the best results
in both comparisons, it is not as scalable as the automated approaches. Ratzinger's
approach is simple and fast, but presents a low recall; differently, SafeRefactor
is able to detect most applied refactorings, although limitations in its test generation
backend results for some kinds of subjects in low precision values. Ref-Finder presented
a low precision and recall in our evaluation.},
journal = {J. Syst. Softw.},
month = apr,
pages = {1006–1022},
numpages = {17},
keywords = {Repository, Refactoring, Manual analysis, Automated analysis}
}


@book{Salton1986,
author = {Salton, Gerard and McGill, Michael J.},
title = {Introduction to Modern Information Retrieval},
year = {1986},
isbn = {0070544840},
publisher = {McGraw-Hill, Inc.},
address = {USA}
}

@inproceedings{Silva2016,
author = {Silva, Danilo and Tsantalis, Nikolaos and Valente, Marco Tulio},
title = {Why We Refactor? Confessions of GitHub Contributors},
year = {2016},
isbn = {9781450342186},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2950290.2950305},
doi = {10.1145/2950290.2950305},
abstract = { Refactoring is a widespread practice that helps developers to improve the maintainability
and readability of their code. However, there is a limited number of studies empirically
investigating the actual motivations behind specific refactoring operations applied
by developers. To fill this gap, we monitored Java projects hosted on GitHub to detect
recently applied refactorings, and asked the developers to explain the reasons behind
their decision to refactor the code. By applying thematic analysis on the collected
responses, we compiled a catalogue of 44 distinct motivations for 12 well-known refactoring
types. We found that refactoring activity is mainly driven by changes in the requirements
and much less by code smells. Extract Method is the most versatile refactoring operation
serving 11 different purposes. Finally, we found evidence that the IDE used by the
developers affects the adoption of automated refactoring tools. },
booktitle = {Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering},
pages = {858–870},
numpages = {13},
keywords = {code smells, GitHub, software evolution, Refactoring},
location = {Seattle, WA, USA},
series = {FSE 2016}
}

@inproceedings{Tsantalis2013,
author = {Tsantalis, Nikolaos and Guana, Victor and Stroulia, Eleni and Hindle, Abram},
title = {A Multidimensional Empirical Study on Refactoring Activity},
year = {2013},
publisher = {IBM Corp.},
address = {USA},
abstract = {In this paper we present an empirical study on the refactoring activity in three well-known
projects. We have studied five research questions that explore the different types
of refactorings applied to different types of sources, the individual contribution
of team members on refactoring activities, the alignment of refactoring activity with
release dates and testing periods, and the motivation behind the applied refactorings.
The studied projects have a history of 12, 7, and 6 years, respectively. We have found
that there is very little variation in the types of refactorings applied on test code,
since the majority of the refactorings focus on the reorganization and renaming of
classes. Additionally, we have identified that the refactoring decision making and
application is often performed by individual refactoring "managers". We have found
a strong alignment between refactoring activity and release dates. Moreover, we found
that the development teams apply a considerable amount of refactorings during testing
periods. Finally, we have also found that in addition to code smell resolution the
main drivers for applying refactorings are the introduction of extension points, and
the resolution of backward compatibility issues.},
booktitle = {Proceedings of the 2013 Conference of the Center for Advanced Studies on Collaborative Research},
pages = {132–146},
numpages = {15},
location = {Ontario, Canada},
series = {CASCON '13}
}

@inproceedings{Biegel2001,
author = {Biegel, Benjamin and Soetens, Quinten David and Hornig, Willi and Diehl, Stephan and Demeyer, Serge},
title = {Comparison of Similarity Metrics for Refactoring Detection},
year = {2011},
isbn = {9781450305747},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1985441.1985452},
doi = {10.1145/1985441.1985452},
abstract = {Identifying refactorings in software archives has been an active research topic in
the last decade, mainly because it is a prerequisite for various software evolution
analyses (e.g., error detection, capturing intent of change, capturing and replaying
changes, and relating refactorings and software metrics). Many of these techniques
rely on similarity measures to identify structurally equivalent code, however, up
until now the effect of this similarity measure on the performance of the refactoring
identification algorithm is largely unexplored. In this paper we replicate a well-known
experiment from Wei\ss{}gerber and Diehl, plugging in three different similarity measures
(text-based, AST-based, token-based). We look at the overlap of the results obtained
by the different metrics, and we compare the results using recall and the computation
time. We conclude that the different result sets have a large overlap and that the
three metrics perform with a comparable quality.},
booktitle = {Proceedings of the 8th Working Conference on Mining Software Repositories},
pages = {53–62},
numpages = {10},
keywords = {software evolution, refactoring, similarity metrics, replication experiment, code clones, mining software repositories},
location = {Waikiki, Honolulu, HI, USA},
series = {MSR '11}
}

@INPROCEEDINGS{Chaparro2014,  author={Chaparro, Oscar and Bavota, Gabriele and Marcus, Andrian and Penta, Massimiliano Di},  booktitle={2014 IEEE International Conference on Software Maintenance and Evolution},   title={On the Impact of Refactoring Operations on Code Quality Metrics},   year={2014},  volume={},  number={},  pages={456-460},  doi={10.1109/ICSME.2014.73}}

@inproceedings{Tsantalis2018,
author = {Tsantalis, Nikolaos and Mansouri, Matin and Eshkevari, Laleh M. and Mazinanian, Davood and Dig, Danny},
title = {Accurate and Efficient Refactoring Detection in Commit History},
booktitle = {Proceedings of the 40th International Conference on Software Engineering},
series = {ICSE '18},
year = {2018},
isbn = {978-1-4503-5638-1},
location = {Gothenburg, Sweden},
pages = {483--494},
numpages = {12},
url = {http://doi.acm.org/10.1145/3180155.3180206},
doi = {10.1145/3180155.3180206},
acmid = {3180206},
publisher = {ACM},
address = {New York, NY, USA},
keywords = {Git, Oracle, abstract syntax tree, accuracy, commit, refactoring},
}

@article{Tsantalis2020,
author = {Tsantalis, Nikolaos and Ketkar, Ameya and Dig, Danny},
title = {RefactoringMiner 2.0},
journal = {IEEE Transactions on Software Engineering},
year = {2020},
numpages = {21},
doi = {10.1109/TSE.2020.3007722},
}

@article{Tufano2017,
  title={There and back again: Can you compile that snapshot?},
  author={Michele Tufano and Fabio Palomba and Gabriele Bavota and Massimiliano Di Penta and Rocco Oliveto and Andrea De Lucia and Denys Poshyvanyk},
  journal={Journal of Software: Evolution and Process},
  year={2017},
  volume={29}
}

@ARTICLE{Silva2020,  author={Silva, Danilo and Silva, João and De Souza Santos, Gustavo Jansen and Terra, Ricardo and Valente, Marco Tulio O.},  journal={IEEE Transactions on Software Engineering},   title={RefDiff 2.0: A Multi-language Refactoring Detection Tool},   year={2020},  volume={},  number={},  pages={1-1},  doi={10.1109/TSE.2020.2968072}}

@inproceedings{Brito2020,
author = {Brito, Rodrigo and Valente, Marco Tulio},
title = {RefDiff4Go: Detecting Refactorings in Go},
year = {2020},
isbn = {9781450387545},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3425269.3425274},
doi = {10.1145/3425269.3425274},
pages = {101–110},
numpages = {10},
keywords = {Software Evolution, Software Repositories, Refactoring},
location = {Natal, Brazil},
series = {SBCARS '20}
}

 @article{Moghadam2021,
  title={Refdetect: A multi-language refactoring detection tool based on string alignment},
  author={Moghadam, Iman Hemati and Cinn{\'e}ide, Mel {\'O} and Zarepour, Faezeh and Jahanmir, Mohamad Aref},
  journal={IEEE Access},
  volume={9},
  pages={86698--86727},
  year={2021},
  publisher={IEEE}
}

@inproceedings{palomba2013detecting,
  title={Detecting bad smells in source code using change history information},
  author={Palomba, Fabio and Bavota, Gabriele and Di Penta, Massimiliano and Oliveto, Rocco and De Lucia, Andrea and Poshyvanyk, Denys},
  booktitle={2013 28th IEEE/ACM International Conference on Automated Software Engineering (ASE)},
  pages={268--278},
  year={2013},
  organization={IEEE}
}

@article{mkaouer2015many,
  title={Many-objective software remodularization using NSGA-III},
  author={Mkaouer, Wiem and Kessentini, Marouane and Shaout, Adnan and Koligheu, Patrice and Bechikh, Slim and Deb, Kalyanmoy and Ouni, Ali},
  journal={ACM Transactions on Software Engineering and Methodology (TOSEM)},
  volume={24},
  number={3},
  pages={1--45},
  year={2015},
  publisher={ACM New York, NY, USA}
}

@incollection{bavota2014recommending,
  title={Recommending refactoring operations in large software systems},
  author={Bavota, Gabriele and De Lucia, Andrea and Marcus, Andrian and Oliveto, Rocco},
  booktitle={Recommendation Systems in Software Engineering},
  pages={387--419},
  year={2014},
  publisher={Springer}
}

@article{ouni2016multi,
  title={Multi-criteria code refactoring using search-based software engineering: An industrial case study},
  author={Ouni, Ali and Kessentini, Marouane and Sahraoui, Houari and Inoue, Katsuro and Deb, Kalyanmoy},
  journal={ACM Transactions on Software Engineering and Methodology (TOSEM)},
  volume={25},
  number={3},
  pages={1--53},
  year={2016},
  publisher={ACM New York, NY, USA}
}

@inproceedings{mazinanian2016jdeodorant,
  title={JDeodorant: clone refactoring},
  author={Mazinanian, Davood and Tsantalis, Nikolaos and Stein, Raphael and Valenta, Zackary},
  booktitle={Proceedings of the 38th international conference on software engineering companion},
  pages={613--616},
  year={2016}
}

@article{roberts1997refactoring,
  title={A refactoring tool for Smalltalk},
  author={Roberts, Don and Brant, John and Johnson, Ralph},
  journal={Theory and Practice of Object systems},
  volume={3},
  number={4},
  pages={253--263},
  year={1997},
  publisher={Wiley Online Library}
}

@article{fontana2012automatic,
  title={Automatic detection of bad smells in code: An experimental assessment.},
  author={Fontana, Francesca Arcelli and Braione, Pietro and Zanoni, Marco},
  journal={J. Object Technol.},
  volume={11},
  number={2},
  pages={5--1},
  year={2012}
}

@inproceedings{ratzinger2008relation,
  title={On the relation of refactorings and software defect prediction},
  author={Ratzinger, Jacek and Sigmund, Thomas and Gall, Harald C},
  booktitle={Proceedings of the 2008 international working conference on Mining software repositories},
  pages={35--38},
  year={2008}
}

@article{kim2014empirical,
  title={An empirical study of refactoringchallenges and benefits at microsoft},
  author={Kim, Miryung and Zimmermann, Thomas and Nagappan, Nachiappan},
  journal={IEEE Transactions on Software Engineering},
  volume={40},
  number={7},
  pages={633--649},
  year={2014},
  publisher={IEEE}
}

@article{soares2010making,
  title={Making program refactoring safer},
  author={Soares, Gustavo and Gheyi, Rohit and Serey, Dalton and Massoni, Tiago},
  journal={IEEE software},
  volume={27},
  number={4},
  pages={52--57},
  year={2010},
  publisher={IEEE}
}

@inproceedings{Atwi2021,
  title={PyRef: refactoring detection in Python projects},
  author={Atwi, Hassan and Lin, Bin and Tsantalis, Nikolaos and Kashiwa, Yutaro and Kamei, Yasutaka and Ubayashi, Naoyasu and Bavota, Gabriele and Lanza, Michele},
  booktitle={2021 IEEE 21st International Working Conference on Source Code Analysis and Manipulation (SCAM)},
  pages={136--141},
  year={2021},
  organization={IEEE}
}

@article{chakraborty2013fogsaa,
  title={FOGSAA: Fast optimal global sequence alignment algorithm},
  author={Chakraborty, Angana and Bandyopadhyay, Sanghamitra},
  journal={Scientific reports},
  volume={3},
  number={1},
  pages={1--9},
  year={2013},
  publisher={Nature Publishing Group}
}

@inproceedings{alves2010deriving,
  title={Deriving metric thresholds from benchmark data},
  author={Alves, Tiago L and Ypma, Christiaan and Visser, Joost},
  booktitle={2010 IEEE International Conference on Software Maintenance},
  pages={1--10},
  year={2010},
  organization={IEEE}
}

@article{ferreira2012identifying,
  title={Identifying thresholds for object-oriented software metrics},
  author={Ferreira, Kecia AM and Bigonha, Mariza AS and Bigonha, Roberto S and Mendes, Luiz FO and Almeida, Heitor C},
  journal={Journal of Systems and Software},
  volume={85},
  number={2},
  pages={244--257},
  year={2012},
  publisher={Elsevier}
}

@inproceedings{oliveira2014extracting,
  title={Extracting relative thresholds for source code metrics},
  author={Oliveira, Paloma and Valente, Marco Tulio and Lima, Fernando Paim},
  booktitle={2014 Software Evolution Week-IEEE Conference on Software Maintenance, Reengineering, and Reverse Engineering (CSMR-WCRE)},
  pages={254--263},
  year={2014},
  organization={IEEE}
}

@inproceedings{fontana2015automatic,
  title={Automatic metric thresholds derivation for code smell detection},
  author={Fontana, Francesca Arcelli and Ferme, Vincenzo and Zanoni, Marco and Yamashita, Aiko},
  booktitle={2015 IEEE/ACM 6th International Workshop on Emerging Trends in Software Metrics},
  pages={44--53},
  year={2015},
  organization={IEEE}
}

@article{fontana2016comparing,
  title={Comparing and experimenting machine learning techniques for code smell detection},
  author={Fontana, Francesca Arcelli and M{\"a}ntyl{\"a}, Mika V and Zanoni, Marco and Marino, Alessandro},
  journal={Empirical Software Engineering},
  volume={21},
  number={3},
  pages={1143--1191},
  year={2016},
  publisher={Springer}
}

@inproceedings{dig2006automated,
  title={Automated upgrading of component-based applications},
  author={Dig, Danny and Johnson, Ralph},
  booktitle={Companion to the 21st ACM SIGPLAN symposium on Object-oriented programming systems, languages, and applications},
  pages={675--676},
  year={2006}
}

@inproceedings{aniche2016satt,
  title={SATT: Tailoring code metric thresholds for different software architectures},
  author={Aniche, Maur{\'\i}cio and Treude, Christoph and Zaidman, Andy and Van Deursen, Arie and Gerosa, Marco Aur{\'e}lio},
  booktitle={2016 IEEE 16th international working conference on source code analysis and manipulation (SCAM)},
  pages={41--50},
  year={2016},
  organization={IEEE}
}

@article{laura2017arena,
  title={ARENA: an approach for the automated generation of release notes},
  author={Moreno, Laura and Bavota, Gabriele and Di Penta, Massimiliano and Oliveto, Rocco and Marcus, Andrian and Canfora, Gerardo},
  journal={IEEE Transactions on Software Engineering},
  volume={43},
  number={2},
  pages={106--127},
  year={2016},
  publisher={IEEE}
}

@inproceedings{fakhoury2019improving,
  title={Improving source code readability: theory and practice},
  author={Fakhoury, Sarah and Roy, Devjeet and Hassan, Adnan and Arnaoudova, Vernera},
  booktitle={2019 IEEE/ACM 27th International Conference on Program Comprehension (ICPC)},
  pages={2--12},
  year={2019},
  organization={IEEE}
}

@inproceedings{peruma2018empirical,
  title={An empirical investigation of how and why developers rename identifiers},
  author={Peruma, Anthony and Mkaouer, Mohamed Wiem and Decker, Michael J and Newman, Christian D},
  booktitle={Proceedings of the 2nd International Workshop on Refactoring},
  pages={26--33},
  year={2018}
}

@inproceedings{lin2019impact,
  title={On the impact of refactoring operations on code naturalness},
  author={Lin, Bin and Nagy, Csaba and Bavota, Gabriele and Lanza, Michele},
  booktitle={2019 IEEE 26th International Conference on Software Analysis, Evolution and Reengineering (SANER)},
  pages={594--598},
  year={2019},
  organization={IEEE}
}

@inproceedings{cedrim2017understanding,
  title={Understanding the impact of refactoring on smells: A longitudinal study of 23 software projects},
  author={Cedrim, Diego and Garcia, Alessandro and Mongiovi, Melina and Gheyi, Rohit and Sousa, Leonardo and de Mello, Rafael and Fonseca, Baldoino and Ribeiro, M{\'a}rcio and Ch{\'a}vez, Alexander},
  booktitle={Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering},
  pages={465--475},
  year={2017}
}

@inproceedings{iammarino2019self,
  title={Self-Admitted Technical Debt Removal and Refactoring Actions: Co-Occurrence or More?},
  author={Iammarino, Martina and Zampetti, Fiorella and Aversano, Lerina and Di Penta, Massimiliano},
  booktitle={2019 IEEE International Conference on Software Maintenance and Evolution (ICSME)},
  pages={186--190},
  year={2019},
  organization={IEEE}
}

@inproceedings{lucas2019does,
  title={Does the Introduction of Lambda Expressions Improve the Comprehension of Java Programs?},
  author={Lucas, Walter and Bonif{\'a}cio, Rodrigo and Canedo, Edna Dias and Marc{\'\i}lio, Diego and Lima, Fernanda},
  booktitle={Proceedings of the XXXIII Brazilian Symposium on Software Engineering},
  pages={187--196},
  year={2019}
}

@article{abid202030,
  title={30 years of software refactoring research: a systematic literature review},
  author={Abid, Chaima and Alizadeh, Vahid and Kessentini, Marouane and Ferreira, Thiago do Nascimento and Dig, Danny},
  journal={arXiv preprint arXiv:2007.02194},
  year={2020}
}

@inproceedings{kim2012field,
  title={A field study of refactoring challenges and benefits},
  author={Kim, Miryung and Zimmermann, Thomas and Nagappan, Nachiappan},
  booktitle={Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering},
  pages={1--11},
  year={2012}
}

@inproceedings{kim2011empirical,
  title={An empirical investigation into the role of API-level refactorings during software evolution},
  author={Kim, Miryung and Cai, Dongxiang and Kim, Sunghun},
  booktitle={Proceedings of the 33rd International Conference on Software Engineering},
  pages={151--160},
  year={2011}
}

@inproceedings{weissgerber2006refactorings,
  title={Are refactorings less error-prone than other changes?},
  author={Wei{\ss}gerber, Peter and Diehl, Stephan},
  booktitle={Proceedings of the 2006 international workshop on Mining software repositories},
  pages={112--118},
  year={2006}
}

@inproceedings{bavota2012does,
  title={When does a refactoring induce bugs? an empirical study},
  author={Bavota, Gabriele and De Carluccio, Bernardino and De Lucia, Andrea and Di Penta, Massimiliano and Oliveto, Rocco and Strollo, Orazio},
  booktitle={2012 IEEE 12th International Working Conference on Source Code Analysis and Manipulation},
  pages={104--113},
  year={2012},
  organization={IEEE}
}

@inproceedings{hora2018assessing,
  title={Assessing the threat of untracked changes in software evolution},
  author={Hora, Andre and Silva, Danilo and Valente, Marco Tulio and Robbes, Romain},
  booktitle={Proceedings of the 40th International Conference on Software Engineering},
  pages={1102--1113},
  year={2018}
}

@inproceedings{mahmoudi2019refactorings,
  title={Are refactorings to blame? an empirical study of refactorings in merge conflicts},
  author={Mahmoudi, Mehran and Nadi, Sarah and Tsantalis, Nikolaos},
  booktitle={2019 IEEE 26th International Conference on Software Analysis, Evolution and Reengineering (SANER)},
  pages={151--162},
  year={2019},
  organization={IEEE}
}

@article{soetens2017changes,
  title={Changes as first-class citizens: A research perspective on modern software tooling},
  author={Soetens, Quinten David and Robbes, Romain and Demeyer, Serge},
  journal={ACM Computing Surveys (CSUR)},
  volume={50},
  number={2},
  pages={1--38},
  year={2017},
  publisher={ACM New York, NY, USA}
}

@inproceedings{henkel2005catchup,
  title={CatchUp! Capturing and replaying refactorings to support API evolution},
  author={Henkel, Johannes and Diwan, Amer},
  booktitle={Proceedings of the 27th international conference on Software engineering},
  pages={274--283},
  year={2005}
}

@inproceedings{alomar2021refactoring,
  title={Refactoring Practices in the Context of Modern Code Review: An Industrial Case Study at Xerox},
  author={AlOmar, Eman Abdullah and AlRubaye, Hussein and Mkaouer, Mohamed Wiem and Ouni, Ali and Kessentini, Marouane},
  booktitle={2021 IEEE/ACM 43rd International Conference on Software Engineering: Software Engineering in Practice (ICSE-SEIP)},
  pages={348--357},
  year={2021},
  organization={IEEE}
}

@article{almogahed2022refactoring,
  title={Refactoring Codes to Improve Software Security Requirements},
  author={Almogahed, Abdullah and Omar, Mazni and Zakaria, Nur Haryani},
  journal={Procedia Computer Science},
  volume={204},
  pages={108--115},
  year={2022},
  publisher={Elsevier}
}

@inproceedings{da2010evaluation,
  title={Evaluation of the impact of code refactoring on embedded software efficiency},
  author={da Silva, Wellisson GP and Brisolara, Lisane and Corr{\^e}a, Ulisses B and Carro, Luigi},
  booktitle={Proceedings of the 1st Workshop de Sistemas Embarcados},
  pages={145--150},
  year={2010}
}

@inproceedings{cruz2017leafactor,
  title={Leafactor: Improving energy efficiency of android apps via automatic refactoring},
  author={Cruz, Luis and Abreu, Rui and Rouvignac, Jean-No{\"e}l},
  booktitle={2017 IEEE/ACM 4th International Conference on Mobile Software Engineering and Systems (MOBILESoft)},
  pages={205--206},
  year={2017},
  organization={IEEE}
}

@inproceedings{moser2007case,
  title={A case study on the impact of refactoring on quality and productivity in an agile team},
  author={Moser, Raimund and Abrahamsson, Pekka and Pedrycz, Witold and Sillitti, Alberto and Succi, Giancarlo},
  booktitle={IFIP Central and East European Conference on Software Engineering Techniques},
  pages={252--266},
  year={2007},
  organization={Springer}
}

@article{kumar2013comparative,
  title={Comparative study of test driven development with traditional techniques},
  author={Kumar, Shaweta and Bansal, Sanjeev},
  journal={Int. J. Soft Comp. \& Eng},
  volume={3},
  number={1},
  pages={352--360},
  year={2013}
}